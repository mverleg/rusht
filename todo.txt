
Command to pipe without using pipe symbol, i.e.
piped cat hello world -- grab '(h\w*)'

Command to expect a number of lines, specifically
1) fail if no lines
2) fail if more than one line

Shell test command (shtest?) that reads a file and tests the command.
Lines are interpreted based on prefix:
* # Comment
* $ Commands
* 'stdin' Literal stdin data
* 'infile' File containing stdin data
* 'out' Output of the previous command
* 'err' Error of the previous command
* 'code' Exit code of the previous command
* 'time' Expression to validate runtime, e.g. >1s
* 'first' Instructions to run beforehand, ignore output
* 'finally' Instructions to run afterwards, ignore output
* 'do' Special shtest instructions, like loops etc
All other lines are rejected if they contain non-whitespace.
With : one can start an indented block, for e.g. multiline input
Maybe also versions of finally for 1) everything ok 2) command ok but test failed and 3) command failed (maybe command failed but test ok?)
Something for shell commands? E.g. "this var has been created"?
How to share state? I think the best I can do is trying to detect shared variables, then inserting exports. Env should already be passed on.
Or run it in a continuous process. But it cannot be a subprocess or it won't share vars. It must be some fake interactive shell.

Make a simple wrapper for creating Rust single-file scripts
* Have special syntax for clap arguments
* Have a simple command to call executables

