use ::std::env;
use ::std::fmt;
use ::std::fmt::Write;
use ::std::fs;
use ::std::path::PathBuf;
use ::std::process::Command;

fn main() {
    println!("cargo:rerun-if-changed=Cargo.toml");
    println!("cargo:rerun-if-changed=build.rs");
    println!("cargo:rerun-if-changed=dictionary.txt");
    bin_example_tests().unwrap();
}

fn find_all_bins() -> Vec<String> {
    // trigger error message to list all binaries
    let out = Command::new("cargo")
        .args(["run", "--bin"])
        .output()
        .expect("failed to execute process");
    String::from_utf8(out.stderr)
        .expect("cargo output not utf8")
        .lines()
        .skip(2)
        .map(|line| {
            line.trim().to_owned()
        })
        .filter(|bin| !bin.is_empty())
        .filter(|bin| !bin.contains("debug"))
        .collect()
}

fn find_all_examples() -> Vec<String> {
    let mut examples = Vec::new();
    if let Ok(examples_dir) = fs::read_dir("./examples") {
        for example_res in examples_dir {
            let path = example_res.unwrap()
                .file_name().to_str().unwrap().to_owned();
            if path.ends_with(".rs") {
                examples.push(path.strip_suffix(".rs").unwrap().to_owned());
            }
        }
    }
    examples
}

fn bin_example_tests() -> Result<(), fmt::Error> {
    println!("cargo:rerun-if-changed=examples");
    let bins = find_all_bins();
    let examples = find_all_examples();
    println!("bins: {}, examples: {}", bins.len(), examples.len());
    let mut code = String::new();
    writeln!(code, "\n// auto-generated by build.rs")?;
    writeln!(code, "#[cfg(test)]")?;
    writeln!(code, "mod generated_tests {{")?;
    if !bins.is_empty() || !examples.is_empty() {
        writeln!(code, "\tuse ::std::process::Command;")?;
        for bin in bins {
            writeln!(code, "\n\t#[test]")?;
            writeln!(code, "\tfn bin_{bin}_help() {{")?;
            writeln!(code, "\t\t")?;
            writeln!(code, "\t\tlet out = Command::new(\"cargo\").args([\"run\", \"--bin\", \"{bin}\", \"--all-features\", \"--\", \"--help\"])")?;
            writeln!(code, "\t\t\t.output().expect(\"failed to execute binary {bin}\");")?;
            writeln!(code, "\t\tassert_eq!(out.status.code(), Some(0), \"binary {bin} --help exit code was not 0\");")?;
            writeln!(code, "\t}}")?;
        }
        for example in examples {
            writeln!(code, "\n\t#[test]")?;
            writeln!(code, "\tfn example_{example}() {{")?;
            writeln!(code, "\t\tlet out = Command::new(\"cargo\").args([\"run\", \"--example\", \"{example}\", \"--all-features\"])")?;
            writeln!(code, "\t\t\t.output().expect(\"failed to execute example {example}\");")?;
            writeln!(code, "\t\tassert_eq!(out.status.code(), Some(0), \"example {example} exit code was not 0\");")?;
            writeln!(code, "\t}}")?;
        }
    }
    writeln!(code, "}}")?;
    let mut out_file = PathBuf::from(env::var("OUT_DIR").unwrap());
    out_file.push("generated_tests.rs");
    fs::write(out_file, code).expect("failed to write");
    Ok(())
}
